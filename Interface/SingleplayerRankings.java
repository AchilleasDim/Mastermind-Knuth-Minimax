/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Controller.Player;
import Controller.ReadAndWrite;
import Controller.Encryption;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author achilleas
 * this class is responsible for displaying the singleplayer rankings of the
 * chosen level of difficulty
 */
public class SingleplayerRankings extends javax.swing.JFrame {

    private final int level;
    private final DefaultTableModel model;
    private final Player activePlayer;
    private Player[] players;

    /**
     * Creates new form Rankings
     *
     * @param level They level of the ranking
     * @param p
     */
    public SingleplayerRankings(int level, Player p) {

        initComponents();
        this.level = level;
        activePlayer = p;

        //sets the header according to the chosen level of difficulty
        if (level == 0) {
            levelofDifficulty.setText(levelofDifficulty.getText() + " Easy");
        } else if (level == 1) {
            levelofDifficulty.setText(levelofDifficulty.getText() + " Moderate");
        } else {
            levelofDifficulty.setText(levelofDifficulty.getText() + " Hard");
        }

        //sets the appropriate model
        model = (DefaultTableModel) rankingsTable.getModel();
        sortSelectionActionPerformed(null);

        /*Listens for changes in the text so as to automatically update it.
         Method updateTable() is used and is presented later on in this class.
        */
        searchingMachine.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                updateTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateTable();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                updateTable();
            }

        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rankings = new javax.swing.JLabel();
        levelofDifficulty = new javax.swing.JLabel();
        sortedBy = new javax.swing.JLabel();
        sortSelection = new javax.swing.JComboBox<>();
        backButton = new javax.swing.JButton();
        searchingMachine = new javax.swing.JTextField();
        Jlabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rankingsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(500, 200));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setMinimumSize(new java.awt.Dimension(544, 394));
        jPanel1.setSize(new java.awt.Dimension(544, 394));

        rankings.setFont(new java.awt.Font("Kokonor", 0, 30)); // NOI18N
        rankings.setForeground(new java.awt.Color(0, 0, 255));
        rankings.setText("Rankings");

        levelofDifficulty.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        levelofDifficulty.setText("Level of difficulty :");

        sortedBy.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        sortedBy.setText("Sorted by :");

        sortSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Time", "Moves" }));
        sortSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSelectionActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        searchingMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchingMachineActionPerformed(evt);
            }
        });

        rankingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Time/Moves"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rankingsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(rankingsTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rankings)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(levelofDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Jlabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(sortedBy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(backButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchingMachine, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(rankings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(levelofDifficulty)
                    .addComponent(sortedBy)
                    .addComponent(sortSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Jlabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(searchingMachine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    The player is given two choices , to sort the rankings according to either 
    the time it took each player to break the code or the moves it took. The 
    following method is responsible for the sorting.
    */
    
    private void sortSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSelectionActionPerformed
        // TODO add your handling code here:
        
        //gets the desired way of sorting
        int sortedBy = sortSelection.getSelectedIndex();
        //creates an array of all the players of the database
        players = ReadAndWrite.readPlayerFile();
        Player temp;
        Boolean swap;

        Player[] havePlayedBeforeSort = new Player[players.length];
        int counter = 0;

        /*
        this loop keeps the players who have played before in the array
        havePlayedBeforeSort
        */
        for (Player player : players) {

            if (!Encryption.decrypt(player.getHighscoreMoves(level)).equals("-")) {
                havePlayedBeforeSort[counter] = player;
                //this counter marks the added players
                counter++;
            }
        }

        int havePlayedBefore = counter;

        /*
        this loop keeps the players who have not played before in the array
        havePlayedBeforeSort
        */
        for (Player player : players) {

            if (Encryption.decrypt(player.getHighscoreMoves(level)).equals("-")) {
                havePlayedBeforeSort[counter] = player;
                counter++;
            }
        }

        /*
        The above loops ensures that all players who have played before
        are placed first in the array.
        */
        players = havePlayedBeforeSort;
        
        //if sorted by time
        if (sortedBy == 0) {

            /*performs a bubble sort, it sorts the players who have played before
            accordingly.
            
            Note: it sorts part of the array , up to the index havePlayedBefore
            */
            for (int i = 0; i < havePlayedBefore; i++) {

                swap = false;

                for (int w = 0; w < havePlayedBefore - 1 - i; w++) {

                    if (Integer.parseInt(Encryption.decrypt(players[w].getHighscoreTime(level)))
                            > Integer.parseInt(Encryption.decrypt(players[w + 1].getHighscoreTime(level)))) {

                        //swaps the players' position in the array
                        temp = players[w + 1];
                        players[w + 1] = players[w];
                        players[w] = temp;
                        swap = true;

                    }

                }

                if (!swap) {
                    break;
                }

            }

            //removes all elements
            model.setRowCount(0); 
            
            //prints the username and the highscore time of each player
            for (Player player : players) {

                if (Encryption.decrypt(player.getHighscoreTime(level)).equals("-")) {
                    model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), "-"});
                } else {
                    long time = Long.valueOf(Encryption.decrypt(player.getHighscoreTime(level)));
                    long seconds = (time / 1000);
                    if ((seconds % 60) > 9) {
                        model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), (seconds / 60) + ":" + (seconds % 60)});
                    } else {
                        model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), (seconds / 60) + ":0" + (seconds % 60)});
                    }
                }
            }
            
        //if sorted by moves
        } else {

            /*performs a bubble sort, it sorts the players who have played before
            accordingly.
            
            Note: it sorts part of the array , up to the index havePlayedBefore
            */
            
            for (int i = 0; i < havePlayedBefore; i++) {

                swap = false;

                for (int w = 0; w < havePlayedBefore - 1 - i; w++) {

                    if (Integer.parseInt(Encryption.decrypt(players[w].getHighscoreMoves(level)))
                            > Integer.parseInt(Encryption.decrypt(players[w + 1].getHighscoreMoves(level)))) {

                        //swaps the players' position in the array
                        temp = players[w + 1];
                        players[w + 1] = players[w];
                        players[w] = temp;
                        swap = true;

                    }

                }

                if (!swap) {
                    break;
                }

            }

            //remove all elements
            model.setRowCount(0); 

            //prints the username and the highscore moves of each player
            for (Player player : players) {
                model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), Encryption.decrypt(player.getHighscoreMoves(level))});
            }

        }
    }//GEN-LAST:event_sortSelectionActionPerformed

    private void searchingMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchingMachineActionPerformed
        // TODO add your handling code here
    }//GEN-LAST:event_searchingMachineActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Highscores screen = new Highscores(activePlayer);
        screen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    /*
    This method is responsible for constantly updating the table according to 
    the current search.
    */
    
    private void updateTable() {
        String currentSearch = searchingMachine.getText().trim();
        int indices = currentSearch.length();

        //if nothing is being currently searched
        if (indices == 0) {

            //if sorted by time
            if (sortSelection.getSelectedIndex() == 0) {

                //removes all elements
                model.setRowCount(0); 
                
                //prints the username and the highscore time of each player
                for (Player player : players) {

                    if (Encryption.decrypt(player.getHighscoreTime(level)).equals("-")) {
                        model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), "-"});
                    } else {
                        long time = Long.valueOf(Encryption.decrypt(player.getHighscoreTime(level)));
                        long seconds = (time / 1000);
                        if ((seconds % 60) > 9) {
                            model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), (seconds / 60) + ":" + (seconds % 60)});
                        } else {
                            model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), (seconds / 60) + ":0" + (seconds % 60)});
                        }
                    }
                }
            
                //if sorted by moves
            } else {

                //remove all elements
                model.setRowCount(0); 

                 //prints the username and the highscore moves of each player
                for (Player player : players) {
                    model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), Encryption.decrypt(player.getHighscoreMoves(level))});
                }

            }

        //if anything is currently searched
        } else {

            //removes all elements
            model.setRowCount(0); 

            //prints only the players that match the current search
            for (Player player : players) {

                if (currentSearch.equals(Encryption.decrypt(player.getUsername().substring(0, indices)))) {

                    model.addRow(new Object[]{Encryption.decrypt(player.getUsername()), Encryption.decrypt(player.getHighscoreMoves(level))});

                }

            }

        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jlabel1;
    private javax.swing.JButton backButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel levelofDifficulty;
    private javax.swing.JLabel rankings;
    private javax.swing.JTable rankingsTable;
    private javax.swing.JTextField searchingMachine;
    private javax.swing.JComboBox<String> sortSelection;
    private javax.swing.JLabel sortedBy;
    // End of variables declaration//GEN-END:variables

}
