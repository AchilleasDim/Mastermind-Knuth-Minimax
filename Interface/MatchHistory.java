/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Controller.Player;
import Controller.ReadAndWrite;
import Controller.Encryption;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author achilleas
 * this class is responsible for displaying the match history with the selected 
 * opponent pVersus
 */
public class MatchHistory extends javax.swing.JFrame {

    private final Player activePlayer;
    private final String opponent;
    private final DefaultTableModel model;

    /**
     * Creates new form MultiplayerRankings
     * @param p
     * @param pVersus
     */
    public MatchHistory(Player p, String pVersus) {
        initComponents();
        activePlayer = p;
        opponent = pVersus;
        //sets the text of the header
        versusPlayer.setText("Match History versus: " + opponent);

        //sets the appropriate model
        model = (DefaultTableModel) rankingsTable.getModel();

        //removes all elements
        model.setRowCount(0); 

        /*
         reads the match history only between activePlayer and the chosen opponent 
         boolean all=false indicates that only the match history between the two
         will be read.
        */
        String[][] matchHistory = ReadAndWrite.readMatchHistory(activePlayer.getUsername(), Encryption.encrypt(opponent), false);

        //prints the match history to the table
        for (int i = 0; i < matchHistory.length; i++) {

            //if this is a row containing information about any played round
            if (matchHistory[i][4] == null) {

                //if the code had not been broken in the particular round
                if (Encryption.decrypt(matchHistory[i][2]).equals("-")) {

                    //prints the results
                    model.addRow(new Object[]{Encryption.decrypt(matchHistory[i][0]),
                        Encryption.decrypt(matchHistory[i][1]),
                        Encryption.decrypt(matchHistory[i][2]),
                        Encryption.decrypt(matchHistory[i][3]),
                        " "});
                    
                /*
                  If the code had been broken in the particular round
                  return the time it took to break it in an appropriate format:
                  min:sec   
                */
                } else {

                    long time = Long.valueOf(Encryption.decrypt(matchHistory[i][2]));
                    long seconds = (time / 1000);

                    if ((seconds % 60) > 9) {

                        model.addRow(new Object[]{Encryption.decrypt(matchHistory[i][0]),
                            Encryption.decrypt(matchHistory[i][1]),
                            (seconds / 60) + ":" + (seconds % 60),
                            Encryption.decrypt(matchHistory[i][3]),
                            " "});
                    } else {

                        model.addRow(new Object[]{Encryption.decrypt(matchHistory[i][0]),
                            Encryption.decrypt(matchHistory[i][1]),
                            (seconds / 60) + ":0" + (seconds % 60),
                            Encryption.decrypt(matchHistory[i][3]),
                            " "});

                    }
                }
            }

            /*
              If this row only contains the winner of the two rounds stored
              in the rowes i-1 and i-2
            */
            
            if (matchHistory[i][4] != null) {

                //prints only the name of the winner
                model.addRow(new Object[]{" ",
                    " ",
                    " ",
                    " ",
                    Encryption.decrypt(matchHistory[i][4])});
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rankings = new javax.swing.JLabel();
        versusPlayer = new javax.swing.JLabel();
        gameHistory = new javax.swing.JScrollPane();
        rankingsTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(500, 200));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setMinimumSize(new java.awt.Dimension(544, 394));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setSize(new java.awt.Dimension(544, 394));

        rankings.setFont(new java.awt.Font("Kokonor", 0, 30)); // NOI18N
        rankings.setForeground(new java.awt.Color(0, 0, 255));
        rankings.setText("Rankings");

        versusPlayer.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        versusPlayer.setText("Game History versus:");

        rankingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codemaker", "Codebreaker", "Time", "Moves", "Winner"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        gameHistory.setViewportView(rankingsTable);
        if (rankingsTable.getColumnModel().getColumnCount() > 0) {
            rankingsTable.getColumnModel().getColumn(0).setResizable(false);
            rankingsTable.getColumnModel().getColumn(1).setResizable(false);
            rankingsTable.getColumnModel().getColumn(2).setResizable(false);
            rankingsTable.getColumnModel().getColumn(3).setResizable(false);
            rankingsTable.getColumnModel().getColumn(4).setResizable(false);
        }

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gameHistory, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(backButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(versusPlayer)
                            .addComponent(rankings))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(rankings)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(versusPlayer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gameHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        Highscores screen = new Highscores(activePlayer);
        screen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JScrollPane gameHistory;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel rankings;
    private javax.swing.JTable rankingsTable;
    private javax.swing.JLabel versusPlayer;
    // End of variables declaration//GEN-END:variables
}
