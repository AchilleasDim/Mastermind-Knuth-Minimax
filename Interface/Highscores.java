/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Controller.Encryption;
import Controller.Player;
import Controller.ReadAndWrite;

/**
 *
 * @author achilleas
 * this screen enables the user to choose what rankings he/she wishes to see
 * the screen contains two options: rankings of the Singleplayer mode 
 *                                  match history between different opponents of the active player
 */
public class Highscores extends javax.swing.JFrame {

    private Player activePlayer;
    private String pVersus;

    /**
     * Creates new form Highscores
     */
    public Highscores(Player p) {
        initComponents();
        activePlayer = p;
        
        //creates a two-dimensional array coping the match history of all the users
        String[][] matchHistory = ReadAndWrite.readMatchHistory(activePlayer.getUsername(), null, true);

        //used to store all the opponents activePlayer has played against
        String[] opponents = new String[99];
        int counter = 0;
        boolean exists;

        //checks each individual match to see if activePlayer participated either as a codebreaker or a codemaker
        for (int i = 0; i < matchHistory.length; i++) {

            exists = false;
            
            //as codemaker
            if (matchHistory[i][0].equals(activePlayer.getUsername())) {

                /*
                The following loop checks to see if the opponent found has already been added to the array "opponents".
                Counter = the number of individual opponents so far
                */
                for (int j = 0; j < counter; j++) {
              
                    if (opponents[j].equals(Encryption.decrypt(matchHistory[i][1]))) {
                        exists = true;
                    }

                }
                
                //if the opponent found has not been added to the array "opponents" yet , 
                //is then added
                if (!exists) {
                    opponents[counter] = Encryption.decrypt(matchHistory[i][1]);
                    //marks the addition of a new opponent
                    counter++;
                }
            }
            
            exists =false;

            //as codebreaker
            if (matchHistory[i][1].equals(activePlayer.getUsername())) {
                
                for (int j = 0; j < counter; j++) {
                    
                    /*
                     The following loop checks to see if the opponent found has already been added to the array "opponents".
                     Counter = the number of individual opponents so far
                    */
                    if (opponents[j].equals(Encryption.decrypt(matchHistory[i][0]))) {
                        exists = true;
                    }
                }

                //if the opponent found has not been added to the array "opponents" yet , 
                //is then added
                if (!exists) {
                    opponents[counter] = Encryption.decrypt(matchHistory[i][0]);
                    exists = false;
                    //marks the addition of a new opponent
                    counter++;
                }
            }

        }

        multiplayerRankings.removeAllItems();
        //fills the JComboBox with the usernames of the opponents of activePlayer
        //so he/she can choose to see the matchHistory with whoever he/she wishes
        for (int i = 0; i < counter; i++) {
            multiplayerRankings.addItem(opponents[i]);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rankings = new javax.swing.JLabel();
        separator = new javax.swing.JSeparator();
        Singleplayer = new javax.swing.JLabel();
        multiplayer = new javax.swing.JLabel();
        chosenRankings = new javax.swing.JComboBox<>();
        multiplayerRankings = new javax.swing.JComboBox<>();
        backButton = new javax.swing.JButton();
        multiplayerRankingsButton = new javax.swing.JButton();
        singleplayerRankingsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(500, 200));
        setMinimumSize(new java.awt.Dimension(544, 394));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setMinimumSize(new java.awt.Dimension(544, 394));
        jPanel1.setSize(new java.awt.Dimension(544, 394));

        rankings.setFont(new java.awt.Font("Kokonor", 2, 35)); // NOI18N
        rankings.setForeground(new java.awt.Color(0, 0, 255));
        rankings.setText("Rankings");

        separator.setBackground(new java.awt.Color(0, 0, 0));

        Singleplayer.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        Singleplayer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Singleplayer.setText("Singleplayer:");

        multiplayer.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        multiplayer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        multiplayer.setText("Multiplayer:");

        chosenRankings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Moderate", "Hard" }));
        chosenRankings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chosenRankingsActionPerformed(evt);
            }
        });

        multiplayerRankings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        multiplayerRankings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplayerRankingsActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        multiplayerRankingsButton.setText("Next");
        multiplayerRankingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplayerRankingsButtonActionPerformed(evt);
            }
        });

        singleplayerRankingsButton.setText("Next");
        singleplayerRankingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleplayerRankingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(separator)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(rankings, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(multiplayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Singleplayer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(multiplayerRankings, 0, 178, Short.MAX_VALUE)
                                    .addComponent(chosenRankings, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(multiplayerRankingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(singleplayerRankingsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(rankings, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Singleplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chosenRankings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleplayerRankingsButton))
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiplayer, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiplayerRankings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiplayerRankingsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(backButton)
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chosenRankingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chosenRankingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chosenRankingsActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        MainMenu screen = new MainMenu(activePlayer);
        screen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void multiplayerRankingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplayerRankingsButtonActionPerformed
        // TODO add your handling code here:

        int index;
        
        //gets the chosen opponent
        index = multiplayerRankings.getSelectedIndex();
        pVersus = multiplayerRankings.getItemAt(index);

        //loads the respective match histroy between activePlayer1 and the chosen opponent pVersus
        MatchHistory screen = new MatchHistory(activePlayer, pVersus);
        screen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_multiplayerRankingsButtonActionPerformed

    private void singleplayerRankingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleplayerRankingsButtonActionPerformed
        // TODO add your handling code here:
        
        //the level of difficulty of the singleplayer mode that the active player whishes to see
        int level = chosenRankings.getSelectedIndex();
        //opens the respective rankings according to the level of difficulty chosen
        SingleplayerRankings screen = new SingleplayerRankings(level, activePlayer);
        screen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_singleplayerRankingsButtonActionPerformed

    private void multiplayerRankingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplayerRankingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_multiplayerRankingsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Singleplayer;
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> chosenRankings;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel multiplayer;
    private javax.swing.JComboBox<String> multiplayerRankings;
    private javax.swing.JButton multiplayerRankingsButton;
    private javax.swing.JLabel rankings;
    private javax.swing.JSeparator separator;
    private javax.swing.JButton singleplayerRankingsButton;
    // End of variables declaration//GEN-END:variables
}
